										******Factory design pattern********
	
	Factory design pattern is used when we have a super class with multiple sub-classes and based on input, we need to return one of the sub-class. 
	This pattern take out the responsibility of instantiation of a class from client program to the factory class.
	
	Factory Design Pattern Super Class :- 

	Super class in factory design pattern can be an interface, abstract class or a normal java class. 
	For our factory design pattern example, we have abstract super class with overridden toString() method for testing purpose.
	
	Factory Design Pattern Advantages :- 
	
	Factory design pattern provides approach to code for interface rather than implementation.
	
	Factory pattern removes the instantiation of actual implementation classes from client code. Factory pattern makes our code more robust,less 
	coupled and easy to extend. For example, we can easily change PC class implementation because client program is unaware of this.
	
	Factory pattern provides abstraction between implementation and client classes through inheritance.
	
	1) Factory method design pattern decouples the calling class from the target class, which result in less coupled and highly cohesive code?
	
	E.g.: JDBC is a good example for this pattern; application code doesn't need to know what database it will be used with, so it doesn't know 
	what database-specific driver classes it should use. Instead, it uses factory methods to get Connections, Statements, and other objects to 
	work with. Which gives you flexibility to change your back-end database without changing your DAO layer in case you are using ANSI SQL features 
	and not coded on DBMS specific feature?
	
	
	4) Code written using Factory design pattern in Java is also easy to debug and troubleshoot because you have a centralized method for 
	object creation and every client is getting object from same place.

	
	Static Class:-

You cannot create the instance of static class.
Loaded automatically by the .NET Framework common language runtime (CLR) when the program or namespace containing the class is loaded.
Static Class cannot have constructor.
We cannot pass the static class to method.
We cannot inherit Static class to another Static class in C#.
A class having all static methods.
Better performance (static methods are bonded on compile time)


Singleton:-

You can create one instance of the object and reuse it.
Singleton instance is created for the first time when the user requested.
Singleton class can have constructor.
You can create the object of singleton class and pass it to method.
Singleton class does not say any restriction of Inheritance.
We can dispose the objects of a singleton class but not of static class.
Methods can be overridden.
Can be lazy loaded when need (static classes are always loaded).
We can implement interface(static class can not implement interface).